@model dynamic

@{
    ViewBag.Title = "New Rental Form";
}

<h2>New Rental Form</h2>

@*
    Sa @Html.BeginForm kreiramo formu, medjutim, kad user klikne na submit button, ceka se na odgovor od servera te za to vrijeme browser moze postati "prazan" ("blank")
    Sa klasicnim kreiranjem forme putem <form> taga, mozemo koristi AJAX poziv, tj. umjesto da POSTamo podatke sa forme, asinhrono pozivamo server u pozadini i na taj nacin browser "ne blinka" dok se ceka na odgovor od servera
*@

<form id="newRental">
    <div class="form-group">
        <label>Customer</label>
        <div class="tt-container">
            <input id="customer" name="customer" data-rule-validCustomer="true" required type="text" value="" class="form-control" />
        </div>
    </div>

    <div class="form-group">
        <label>Movie</label>
        <div class="tt-container">
            <input id="movie" name="movie" data-rule-atLeastOneMovie="true" type="text" value="" class="form-control" />
        </div>
    </div>

    <div class="row">
        <div class="col-md-4 col-sm-4">
            <ul id="movies" class="list-group"></ul>
        </div>
    </div>

    <button class="btn btn-primary">Submit</button>
</form>

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval") @* jquery validacija na klijentskoj strani *@

    <script>
        $(document).ready(function () {
            var vm = { // view model na klijentskoj strani
                movieIds: []
            };

            // Auto-completion za customer polje
            var customers = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/customers?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#customer').typeahead({
                minLength: 1,
                highlight: true
            }, {
                    name: 'customers',
                    display: 'name',
                    source: customers
                }).on("typeahead:select", function (e, customer) {
                    vm.customerId = customer.id;
                });
            /////////////////////////////////////////////////////////////////////

            // Auto-completion za movie polje
            var movies = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/movies?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#movie').typeahead({
                minLength: 1,
                highlight: true
            }, {
                    name: 'movies',
                    display: 'name',
                    source: movies
                }).on("typeahead:select", function (e, movie) {
                    $("#movies").append("<li class='list-group-item'>" + movie.name + "</li>");
                    $("#movie").typeahead("val", "");

                    vm.movieIds.push(movie.id);
                });
            ////////////////////////////////////////////////////////////////////////////////////

            // Custom validatori
            $.validator.addMethod("validCustomer", function () {
                return vm.customerId && vm.customerId !== 0;
            }, "Please select a valid customer.");

            $.validator.addMethod("atLeastOneMovie", function () {
                return vm.movieIds.length > 0;
            }, "Please select at least one movie.");
            //////////////////////////////////////////////////////

            var validator = $("#newRental").validate({ // jquery validacija
                submitHandler: function () { // ukoliko prodje validacija, ova funkcija se poziva da submita formu ka serveru (da nema validacije, koristili bi $("#newRental").submit(function(e){...}))
                    //e.preventDefault(); // sprjecava da se forma submita uobicajeno jer zelimo koristiti AJAX poziv

                    $.ajax({
                        url: "/api/newRentals",
                        method: "post",
                        data: vm
                    })
                        .done(function () {
                            toastr.success("Rentals successfully recorded!");

                            $("#customer").typeahead("val", "");
                            $("#movie").typeahead("val", "");
                            $("#movies").empty();

                            vm = { movieIds: [] };

                            validator.resetForm();
                        })
                        .fail(function () {
                            toastr.error("Something unexpected happened..");
                        });

                    return false; // drugi nacin - sprjecava da se forma submita uobicajeno jer zelimo koristiti AJAX poziv
                }
            });
        });
    </script>
}